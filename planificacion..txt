Descripci√≥n detallada del proyecto
Este proyecto es un ‚ÄúHabit Tracker‚Äù o rastreador de h√°bitos desarrollado en Python con una interfaz de consola.
Su objetivo principal es ayudar al usuario a crear, gestionar y completar h√°bitos, recompens√°ndolo con puntos que luego puede canjear por premios.

Est√° dise√±ado con un enfoque gamificado, es decir, que motiva al usuario a cumplir sus metas mediante un sistema de recompensas.

Estructura principal del proyecto
El c√≥digo est√° organizado en tres clases principales y una funci√≥n main() que act√∫a como la interfaz con el usuario.

1. Clase Puntos
Esta clase se encarga de gestionar el puntaje del usuario.

Atributos:

self.total: Guarda el total de puntos acumulados.

M√©todos:

agregar_puntos():
Asigna una cantidad aleatoria de puntos entre 100 y 500 y los suma al total.

gastar_puntos(cantidad):
Resta puntos si el usuario tiene suficientes; devuelve True si la transacci√≥n fue exitosa, False si no.

obtener_puntos():
Devuelve el total actual de puntos.

üîπ Funci√≥n en el sistema: Premia al usuario cuando completa h√°bitos y permite gastar puntos para obtener recompensas.

2. Clase Recompensa
Gestiona las recompensas disponibles que el usuario puede comprar con sus puntos.

Atributos:

self.recompensas: Lista donde se almacenan todas las recompensas creadas.

self.proximo_id: Lleva el control del ID √∫nico para cada recompensa.

M√©todos:

agregar_recompensa(nombre, costo):
Crea y guarda una nueva recompensa con un nombre y un costo en puntos.

mostrar_recompensas():
Lista todas las recompensas disponibles con su ID, nombre y costo.

canjear(recompensa_id, puntos):
Permite al usuario gastar puntos para obtener una recompensa, siempre que tenga saldo suficiente.

üîπ Funci√≥n en el sistema: Motiva al usuario a cumplir h√°bitos para poder canjear premios.

3. Clase Persona
Representa al usuario y almacena toda su informaci√≥n: h√°bitos, puntos y recompensas.

Atributos:

self.nombre: Nombre del usuario.

self.habitos: Lista que guarda los h√°bitos registrados.

self.recompensas: Objeto de la clase Recompensa asociado a esta persona.

self.puntos: Objeto de la clase Puntos para gestionar el puntaje.

self.proximo_id: Controla el ID √∫nico de cada h√°bito.

M√©todos:

agregar_habito(nombre, frecuencia):
Registra un nuevo h√°bito con su frecuencia (por ejemplo, diario o semanal).

eliminar_habito(habito_id):
Borra un h√°bito por su ID.

editar_habito(habito_id, nuevo_nombre, nueva_frecuencia):
Permite cambiar el nombre y la frecuencia de un h√°bito ya existente.

completar_habito(habito_id):
Marca un h√°bito como completado, otorga puntos y evita que se vuelva a marcar.

mostrar_habitos():
Lista todos los h√°bitos con su estado (completado o no) y muestra los puntos totales.

üîπ Funci√≥n en el sistema: Sirve como n√∫cleo que une los h√°bitos, el puntaje y las recompensas de cada usuario.

4. Funci√≥n main() ‚Äì Interfaz de consola
Es el men√∫ interactivo que permite al usuario navegar por todas las funciones.

Opciones disponibles:

Ver h√°bitos registrados.

Agregar un nuevo h√°bito.

Eliminar un h√°bito.

Editar un h√°bito.

Marcar un h√°bito como completado (y ganar puntos).

Ver recompensas disponibles.

Agregar una nueva recompensa.

Canjear una recompensa.

Salir del programa.

üîπ Funcionamiento:
El programa pide el nombre del usuario, crea un objeto Persona y entra en un bucle donde el usuario elige opciones para gestionar sus h√°bitos y recompensas.

Flujo de uso t√≠pico
El usuario abre el programa y escribe su nombre.

Empieza agregando h√°bitos (por ejemplo: ‚ÄúLeer 30 minutos‚Äù, frecuencia diaria).

Cuando completa un h√°bito, lo marca como hecho y gana puntos aleatorios (100-500).

Con los puntos acumulados, revisa la lista de recompensas disponibles.

Si tiene suficientes puntos, canjea una recompensa.

El ciclo se repite, motivando a cumplir h√°bitos para obtener premios.

